#!/bin/env  python3

# This script will retrieve attachment links from NEXMTL project
from urllib import response
import requests
import json 
from requests_kerberos import HTTPKerberosAuth
import getpass
from cfonts import render, say
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#text graphic using cfonts
output = render('JIRA Attachment URL', colors=['cyan','bright_yellow'], align='center', font='block')
output2 = render('Retrieval - NEXMTL', colors=['cyan','bright_yellow'], align='center', font='block')
print(output)
print(output2)

#authentication
print("\n Before begin, kindly fill in the details below:")

name= input("\n Username:")
password = getpass.getpass("\n Password:")  #user input prompted as string and read as Password

s=requests.Session()
headers = { 'Content-type': 'application/json' }
#url="https://jira.devtools.intel.com/rest/api/latest/search?jql=project=NEXMTL"
url="https://jira-jdc-t2.devtools.intel.com/rest/api/latest/search?jql=project=JSD"

#jira basic auth
r=s.get(url,verify=False,auth=(name,password),headers=headers) 

try:
    while True: 
        if r.ok:
            print("\n ----------------------------------------------")
            print("\n WELCOME TO JIRA ATTACHMENT DOWNLOADER - NEXMTL")
            print("\n ---------------------------------------------- \n")
            print("\n Here are the list of tickets: \n")
            for i in r.json()['issues']:
                key=i['key']
                jira_title=i['fields']['summary']
                jira_priority=i['fields']['priority']['name']
                jira_status=i['fields']['status']['name']
                print(key)
                print(jira_title,"\n")
        else:
            print("\n Oops! We could not verify you. Please run the script and login again, thank you!")
            break

        ticket = input("\n Enter a ticket number (example = 1): ")

        #url2 = "\n https://jira.devtools.intel.com/rest/api/2/issue/NEXMTL-"+ticket
        url2="https://jira-jdc-t2.devtools.intel.com/rest/api/2/issue/JSD-"+ticket
        print(url2)
        r2=s.get(url2,verify=False,auth=(name,password),headers=headers)

        if r2.ok:
            # Print JSON "prettily"
            pretty_json = json.dumps(r2.json(), indent=4)
            # Write pretty print JSON data to file
            with open("r2.json","w") as f:
                f.write(pretty_json)
            # Read JSON data from file and pretty print it
            with open("r2.json","r") as f:
                pretty_json = f.read()
            # Create Python object from JSON string data
            d = json.loads(pretty_json)
            myArray = d["fields"]["attachment"]  

            for i in myArray:
                attach=i["content"]
                filename = i["filename"]
                if attach != " ":
                    print("\n Attachment URL: ", attach)
                    extension = 'log'
                    if extension == "log":
                            if "log" in filename or "LOG" in filename:
                                print("\n log file download",filename)
                                r3a = requests.get(attach, verify=False, allow_redirects=True,auth=(name,password),headers=headers)
                                open(filename, 'wb').write(r.content)
                                filename=""
                                print("Attachment downloaded! You can browse it in your script directory folder \n")             
                    extension2 = 'txt'
                    if extension2 == "txt":
                            if "txt" in filename or "TXT" in filename:
                                print("\n txt file download",filename)
                                r3a = requests.get(attach, verify=False, allow_redirects=True,auth=(name,password),headers=headers)
                                open(filename, 'wb').write(r.content)
                                filename=""
                                print("Attachment downloaded! You can browse it in your script directory folder \n")
                    if '.' not in filename:
                        print("\n This file did not have extension: ", filename)
                        print("\n Currently determining its file type...")
                        with open(filename) as f:
                            lines = f.read() ##Assume the sample file has 3 lines
                            first = lines.split('\n', 1)[0]
                        print(first)
                        if "PNG" in first:
                            filetype='png'
                            print("\n This file is a PNG file, skipped")
                        if "JFIF" in first:
                            filetype='jpg'
                            print("\n This file is a JPG file, skipped")
                        if "PDF" in first:
                            filetype='pdf'
                            print("\n This file is a PDF file, skipped")
                            
                else:
                    print("\n No attachment found!")
        else:
            print("\n Please select ticket number again if you wrongly enter the answer")

        #url3 = "\n https://jira.devtools.intel.com/rest/api/2/issue/NEXMTL-"+ticket+"/comment"
        url3 = "\n https://jira-jdc-t2.devtools.intel.com/rest/api/2/issue/JSD-"+ticket+"/comment"
        print(url3)
        r3=s.get(url3,verify=False,auth=(name,password),headers=headers)

        if r3.ok:
            # Print JSON "prettily"
            pretty_json = json.dumps(r3.json(), indent=4)
            # Write pretty print JSON data to file
            with open("r3.json","w") as f:
                f.write(pretty_json)
            # Read JSON data from file and pretty print it
            with open("r3.json","r") as f:
                pretty_json = f.read()
            # Create Python object from JSON string data
            d = json.loads(pretty_json)
            
            Question = input("\n Do you want to read the comments? (Y/N)")
            if Question == "Y" or Question == "y" or Question == "yes" or Question == "YES" or Question == "Yes":
                print("\n --------------------------------")
                print("\n Comments Section for NEXMTL-"+ticket)
                print("\n -------------------------------- \n")
                myArray2 = d["comments"]    
                for i in myArray2:
                    comment=i["body"]
                    author=i["author"]["name"]
                    date=i["updated"]       
                    print("\n The comments: ", comment, "\n from", author, "\n on", date)
                Question2 = input("\n Do you want to add comment?")
                if Question2 == "Y" or Question2 == "y" or Question2 == "yes" or Question2 == "YES" or Question2 == "Yes":
                    Comments = input("\n Please type your comment here: \n")
                    print(Comments)
                    s2=requests.Session()
                    headers2 = {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                        }
                    data=json.dumps( {
                        "body": 
                            Comments,     
                            } )
                    response=requests.post(url3,verify=False,auth=(name,password),headers=headers2,data=data)
                    data=response.json()
                    print("\n Your comment has been added! \n")
                elif Question2 == "N" or Question2 == "n" or Question2 == "no" or Question2 == "NO" or Question2 == "No":
                    print("\n Alright, you may proceed")
            elif Question == "N" or Question == "n" or Question == "no" or Question == "NO" or Question == "No":
                print("\n Alright, you may have a look on other tickets :D")
            else:
                print("\n Oops! Please try again if you wrongly enter the answer, thank you!")
            
except KeyboardInterrupt:
    pass
